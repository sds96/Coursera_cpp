#ifndef BUSMANAGER_H_
#define BUSMANAGER_H_

#include "Bus_and_Stop.h"
#include <string>
#include <set>
#include <vector>
#include <unordered_map>
#include <iomanip>

struct Response{
    std::string bus_name="";
    int stops_number = 0;
    int unique_stops_number = 0;
    double route_length = 0.0;
    bool exist = true;
};

std::ostream& operator<<(std::ostream& os, const Response& response);


class BusManager{
	std::unordered_map<std::string, Bus> buses;
	std::unordered_map<std::string, BusStop> stops;
public:
	BusManager(){};

	void ReadStop(std::istream& is){
		BusStop stop;
		stop.Read_Stop(is);
		stops[stop.GetName()] = stop;
	}

	void ReadBus(std::istream& is){
		Bus bus;
		bus.Read_Route(is);
		buses[bus.GetNumber()] = bus;
	}

	void PrintAll(std::ostream& os = std::cout) const{
		for(const auto& el : buses){
			os << "Bus number #" << el.first << " has stops: ";
			el.second.PrintStops();
			os << "\n";
		}
		for(const auto& el : stops){
			os << el.second << endl;
		}
	};

	Response Print_Bus(std::istream& is, std::ostream& os) const{
		Response resp;
		try{
			is.ignore(1);
			string numb ="";
			getline(is, numb);
			resp.bus_name = numb;

			const Bus& curr_bus = buses.at(numb);
			double lenght(0);
			for(size_t i = 0; i < curr_bus.route.size()-1; ++i){
				lenght += ComputeDistance(stops.at(curr_bus.route[i]).coord, stops.at(curr_bus.route[i+1]).coord);
			}
			lenght = curr_bus.isCircle ? lenght : lenght*2;
			resp.route_length = lenght;

			resp.stops_number = curr_bus.isCircle ? curr_bus.route.size() : 2*curr_bus.route.size()-1;

			set<string> unique (curr_bus.route.begin(), curr_bus.route.end());
			resp.unique_stops_number = unique.size();

			return resp;
		} catch (...){
			resp.exist = false;
			return resp;
		}
	};
};

#endif /* BUSMANAGER_H_ */
