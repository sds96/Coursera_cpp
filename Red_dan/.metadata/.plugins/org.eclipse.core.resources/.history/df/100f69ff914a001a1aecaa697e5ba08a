#include "test_runner.h"
#include "profile.h"
#include <vector>
#include <future>
#include <numeric>
using namespace std;

template <typename T>
class Page{
public:
	T m_begin;
	T m_end;
	const size_t m_size;
	Page(T beg, T end)
	: m_begin(beg)
	, m_end(end)
	, m_size(distance(beg, end))
	{}
	T begin() {return m_begin;}
	T end() {return m_end;}
	T begin() const {return m_begin;}
	T end() const {return m_end;}
	size_t size() const {return m_size;}
};

template <typename Iterator>
class Paginator {
private:
	vector<Page<Iterator>> pages;
public:
	Paginator(Iterator b, Iterator e, size_t page_size)
	{
		auto it = b;
		while(it != e){
			if(distance(it,e) > page_size){
				auto temp_end = it+page_size;
				pages.push_back(Page<Iterator>(it, temp_end));
				it = temp_end;
			}
			else {
				pages.push_back(Page<Iterator>(it, e));
				it = e;
			}
		}
	}
	size_t size() const{return pages.size();}
	auto begin(){return pages.begin();}
	auto end(){return pages.end();}
	auto begin() const{return pages.begin();}
	auto end()const {return pages.end();}
};

template <typename C>
auto Paginate(C& c, size_t page_size) {
	return Paginator(c.begin(), c.end(), page_size);
};

int64_t CalculateMatrixSum(const vector<vector<int>>& matrix) {
	if (matrix.size() == 0) return 0;
	vector<future<int64_t>> sums;
	size_t page_size = matrix.size()/4;
	for (auto page: Paginate(matrix, page_size)){
		sums.push_back(async([page]{
			int64_t sum(0);
			for (auto& line: page){
				sum = accumulate(line.begin(), line.end(), sum);
			}
			return sum;
		}
		));
	}
	int64_t ret(0);
	for(auto& f:sums){
		ret+=f.get();
	}
	return ret;
}

void TestCalculateMatrixSum() {
  const vector<vector<int>> matrix = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
  };
  ASSERT_EQUAL(CalculateMatrixSum(matrix), 136);
}

int main() {
  TestRunner tr;
  {LOG_DURATION("Parallel");
	  RUN_TEST(tr, TestCalculateMatrixSum);
  }

}
