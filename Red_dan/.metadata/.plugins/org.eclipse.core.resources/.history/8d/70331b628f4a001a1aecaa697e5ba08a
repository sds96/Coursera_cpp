#include "test_runner.h"
#include "profile.h"
#include <vector>
#include <future>
#include <numeric>
using namespace std;

template <typename Iterator>
class Paginator {
public:
    class Page {
        Iterator Begin;
        Iterator End;
        const size_t Size;
    public:
        Page(Iterator begin_, Iterator end_) : Begin(begin_), End(end_), Size(distance(begin_, end_)) {}

        size_t size() const { return Size;}
        auto& begin() { return Begin;}
        const auto& begin() const { return Begin;}
        auto& end() { return End;}
        const auto& end() const { return End;}
    };

    Paginator(Iterator begin_, Iterator end_, size_t page_size_)
    {
        bool ahead = true;
        if (begin_ == end_) ahead = false;
        while (ahead) {
            if (distance(begin_, end_) > page_size_) {
                auto current_end = next(begin_,page_size_);
                pages.push_back(Page(begin_, current_end));
                begin_ = current_end;
            } else {
                pages.push_back(Page(begin_, end_));
                ahead = false;
            }
        }
    }

    auto begin() {return pages.begin();}
    auto begin() const {return pages.begin();}
    auto end() const {return pages.end();}
    auto end() {return pages.end();}
    size_t size() const {return pages.size();}

private:
    vector<Page> pages;
};

template <typename C>
auto Paginate(C& c, size_t page_size) {
    return Paginator(c.begin(), c.end(), page_size);
}

int64_t CalculateMatrixSum(const vector<vector<int>>& matrix) {
	vector<future<int64_t>> sums;
	size_t page_size = matrix.size()/4;

	for (auto& page: Paginate(matrix, page_size)){
		sums.push_back(async([&page]{
			int64_t sum(0);
			for (auto& line: page){
				sum = accumulate(line.begin(), line.end(), sum);
			}
			return sum;
		}
		));
	}
	int64_t ret(0);
	for(auto& f:sums){
		ret+=f.get();
	}
	return ret;
}

int64_t CalculateMatrixSum2(const vector<vector<int>>& matrix) {
	vector<int64_t> sums;
	size_t page_size = matrix.size()/4;
	for (auto& page: Paginate(matrix, page_size)){
		sums.push_back([&page]{
			int64_t sum(0);
			for (auto& line: page){
				sum = accumulate(line.begin(), line.end(), sum);
			}
			return sum;
		}
		));
	}
	int64_t ret(0);
	for(auto& f:sums){
		ret+=f;
	}
	return ret;
}

void TestCalculateMatrixSum() {
  const vector<vector<int>> matrix = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
  };
  ASSERT_EQUAL(CalculateMatrixSum(matrix), 136);
}
void TestCalculateMatrixSum2() {
  const vector<vector<int>> matrix = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {13, 14, 15, 16}
  };
  ASSERT_EQUAL(CalculateMatrixSum2(matrix), 136);
}

int main() {
  TestRunner tr;
  {LOG_DURATION("Parallel");
	  RUN_TEST(tr, TestCalculateMatrixSum);
  }
  {LOG_DURATION("Single");
	  RUN_TEST(tr, TestCalculateMatrixSum2);
  }

}
