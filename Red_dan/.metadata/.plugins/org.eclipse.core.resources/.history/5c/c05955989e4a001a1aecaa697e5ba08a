#include "test_runner.h"
#include "profile.h"
#include <map>
#include <string>
#include <string_view>
#include <vector>
#include <algorithm>
using namespace std;

struct Stats {
  map<string, int> word_frequences;

  void operator += (const Stats& other){
	  for(const auto& el: other.word_frequences)
		  word_frequences[el.first]+= el.second;
  };
};

Stats ExploreLine(const set<string>& key_words, const string& line) {
	Stats ret;
	vector<string> words;
	auto beg = line.find_first_not_of(' ');
	while (pos!=line.npos){
		pos = line.find(' ');
		words.push_back(line.substr(beg,pos));
		beg = pos+1;

	}
	for (const auto& word: words)
		if (key_words.count(word) > 0)
			ret.word_frequences[word]++;
	return ret;
}

Stats ExploreKeyWordsSingleThread(
  const set<string>& key_words, istream& input
) {
  Stats result;
  for (string line; getline(input, line); ) {
    result += ExploreLine(key_words, line);
  }
  return result;
}

Stats ExploreKeyWords(const set<string>& key_words, istream& input) {
  return ExploreKeyWordsSingleThread(key_words, input);
}

void TestBasic() {
  const set<string> key_words = {"yangle", "rocks", "sucks", "all"};

  stringstream ss;
  ss << "this new yangle service really rocks\n";
  ss << "It sucks when yangle isn't available\n";
  ss << "10 reasons why yangle is the best IT company\n";
  ss << "yangle rocks others suck\n";
  ss << "Goondex really sucks, but yangle rocks. Use yangle\n";

  const auto stats = ExploreKeyWords(key_words, ss);
  const map<string, int> expected = {
    {"yangle", 6},
    {"rocks", 2},
    {"sucks", 1}
  };
  ASSERT_EQUAL(stats.word_frequences, expected);
}

int main() {
  TestRunner tr;
  RUN_TEST(tr, TestBasic);
}
